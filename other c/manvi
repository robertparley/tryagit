VIM
[NAME]
	vim - Vi IMproved, a programmers text editor

[SYNOPSIS]
	[vim] [option] [file..]
	[vim] [option] -
	[vim] -t tag
	[vim] [option] -q [errorfile]

	ex
	view
	gvim gview evim eview
	rvim rview rgvim rgview

[DESCRIPTION]
	Vim is a text editor that is upwards compatible to Vi.It can be used to edit all kinds of plain text. It is especially useful for editing programs.

There are a lot of enhancements above Vi:multi level undo, multi windows and buffers,syntax highlighting, command line editing,filename completion, on-line help, visual selection, etc.. See ":help vi_diff.txt" for a summary of the differences between Vim and Vi.

While running Vim a lot of help can be obtained from the on-line help system, with the ":help" command. See the ON-LINE HELP section below.

Most often Vim is started to edit a single file with the command

	vim file

More generally Vim is started with:

	vim [options] [filelist]

If the filelist is missing, the editor will start with an empty bufferj. Otherwise exactly one out of the following four maybe used to choose one or more files to be edited.

file ..	
A list of filenames. The first one will be the current file and read into the buffer. The cursor will be positioned on the first line of the buffer. You can get to the other files with the ":next" command. To edit a file that starts with a dash,precede the filelist with "--".

-	
The file to edit is read from stdin. Commands are read from stderr, which should be a tty.

-t {tag}
The file to edit and the initial cursor postion depends on a "tag", a sort of goto label. {tag} is looked up in the tags file, the asociated file becomes the current file and the associated command is executed. Mostly this is used for C programs, in which case {tag} could be a function name. The effect is that the file containing that function becomes the current file and the cursor is postioned on the start of the function. See ":help tag-commands."

-q [errorfile]
Start in quickFix mode. The file [errorfile] is read and the first error is displayed. If [errorfile] is omitted, the filename is obtained from the 'errorfile' option(defaults to "AztecC.Err" for Amiga, "errors.err" on other systems). Further errors can be jumped to with the ":cn" command. See ":help quickfix".

Vim behaves differently,depending on the name of the command (the executable may still be the same file).

vim	The "normal" way,everything is default.
ex	Start in Ex mode. Go to Normal mode with the ":vi" command.
	Can also be done with the "-e" argument.
view	Start in read-only mode. You will be protected from writing the files. 
	Can also be done with the "-R" argument.
gvim gview
	The GUI version. Starts a new windows.
	Can also be done with the "-g" argument.
evim eview
	The GUI version in easy mode. Starts a new window.
	Can also be done with the "-y" argument.
rvim rview rgvim rgview
	Like the above, but with restrictions.
	It will not be possible to start shell commands, or suspend Vim.
	Can also be done with the "-Z" argument.

[OPTIONS]
The options may be given in any order, before or after filenames.Options without an argument can argument can be combined after a single dash.

+[num]
For the first file the cursor will be positioned on line "num". If "num" is missing, the cursor will be positioned on the last line.

+/{pat}
For the first file the cursor will be positioned on the first occurence of {pat}. See ":help search-pattern" for the available search patterns.

+{command}

-c {command}
{command} will be executed after the first file has been read. {command} is interpreted as an Ex command. If the {command} contains spaces it must be enclosed in double quotes (this depends on the shell that is used).
Example:Vim "+set si" main.c
Note: You can use up to 10 "+" or "-c" commands.

-S{file}
{file} will be sourced after the first file has been read. This is equivalent to -c "source {file}". {file} cannot start with '-'. If {file} is omitted "Session.vim" is used(only works when -S is the last argument).

--cmd {command}
Like using "-c",but the command is executed just before processing any vimrc file. You can use up to 10 of these commands,independently from "-c" commands.

-A
If vim has been compiled with ARABIC support for editing right-to-left oriented files and Arabic keyboard mapping, this option starts Vim in Arabic mode, i.e. 'arabic' is set. Otherwise an error message is given and Vim aborts.

-b
Binary mode.A few options will be set that makes it posible to edit a binary or executable file.

-C 
Compatible. Set the 'compatible' option. This will make Vim behave mostly like Vi, even though a.vimrc file exists.

-d
Start in diff mode. There should be two, three or four file name arguments. Vim will open all the files and show differences between them. Works like vimdiff(1).

-d{device}
Open {device} for use as a terminal. Only on the Amiga.Example:"-d con:20/30600/150".

-D
Debugging. Go to debugging mode when executing the first command from a script.

-e
Start Vim in Ex mode, just like the executable was called "ex".

-E
Start Vim in improved Ex mode, just like the executable was called "exim".

-f
Foreground. For the GUI version, Vim will not fork and detach from the shell it was started in. On the Amiga, Vim is not restarted to open a new window. This option should be used when Vim is executed by a program that will wait for the edit session to finish(e.g. mail). On the Amiga the ":sh" and ":!" commands will not work.

--nofork
Foreground. For the GUI version, Vim will not fork and detach from the shell it was started in.

-F
If vim has been compiled with FKMAP support for editing right-to-left oriented files and Farsi keyboard mapping, this option starts vim in Farsi mode, i.e. 'fkmap' and  'rightleft' are set. Otherwise an error message is given and Vim aborts.

-g
If Vim has been compiled with GUI support, this option enables the GUI. If no GUI support was compiled in, an error message is given and Vim aborts.

-h
Give a bit of help about the command line arguments and options. After this Vim exits.

-H
If Vim has been compiled with RIGHTLEFT support for editing right-to-left oriented files and Hebrew keyboard mapping, this option starts Vim in Hebrew mode, i.e. 'hkmap' and 'rightleft' are set. Otherwise an error message is given and Vim aborts.

-i {viminfo}
When using the viminfo file is enabled, this option sets the filename to use, instead of the default "~/.viminfo". This can also be used to skip the use of the .viminfo file, by giving the name "NONE". 

-L	Same as -r.

-l
Lisp mode. Sets the 'lisp' and 'showmatch' option on.

-m
Modifying files is disabled. Resets the 'write' option. You can still modify the buffer, but writing a file is not possible. 

-M
Modificatiions not allowed. The 'modifiable' and 'write' options will be unset, so that changes are not allowed and files can not be written. Note that these options can be set to enable making modifications. 

-N
No-compatible mode. Reset the 'compatible' option. This will make Vim behave a bit better, but less Vi compatible, even though a .vimrc file does not exist. 

-n
No swap file will be used. Recovery after a crash will be impossible. Handy if you want to edit a file on a very slow medium (e.g. floppy). Can also be done with ":set uc=0". Can be undone with ":set uc=200".

-nb
Become an editor server for NetBeans. See the docs for details.

-o[N]
Open N windows stacked. When N is omitted, open one window for each file.

-O[N]
Open N windows side by side. When N is omitted , open one tab page for each file.

-p[N]
Open N tab pages. When N is omitted, open one tab page for each file.

-R
Read-only mode. The 'readonly' option will be set. You can still edit the buffer, but will be prevented from accidently overwriting a file. If you do want to overwrite a file, add an exclamation mark to the Ex command, as in":w!". The -R option also imp
